{"version":3,"names":[],"mappings":"","sources":["tickets.js"],"sourcesContent":["// Feathers/API setup\nconst socket = io({secure: true});\nconst client = feathers()\n.configure(feathers.hooks())\n.configure(feathers.socketio(socket))\n.configure(feathers.authentication({\n  cookie: 'feathers-jwt',\n}));\n\n// toastr config\ntoastr.options.closeDuration = 12000;\ntoastr.options.positionClass = \"toast-bottom-right\";\n\nconst users = client.service('/users');\nvar currentPage = 0;\nvar itemsPerPage = 15;\nvar pagesLoaded = [];\nvar allTickets = [];\n\nclient.authenticate()\n.then(response => {\n  console.info(\"authenticated successfully\");\n  client.set('jwt', response.accessToken)\n  return client.passport.verifyJWT(response.accessToken);\n})\n.then(payload => {\n  console.info(\"verified JWT\");\n\n  return users.get(payload.userId)\n})\n.then(user => {\n  console.log(\"user\",user);\n  // don't worry, we don't allow any instructor/admin-level\n  // queries to be performed on the back end via REST.\n  if (user.role !== \"Instructor\" && user.role !== \"TA\") {\n    window.location.href = '/';\n  } else if (user.role === \"Instructor\") {\n    // add link back to instructor home\n    $('<li><a href=\"/instructor.html\">Instructor Home</a></li>').insertBefore('ul.nav>li:first');\n  }\n\n  client.set('user', user);\n  updateTicketList(currentPage, []);\n\n  // TODO: these should only run once\n  socket.on(\"passcode updated\", function() {\n    toastr.success(\"Passcode updated.\", {timeout: 300000});\n  });\n  socket.on(\"tokens created\", function(token) {\n    toastr.success(\"New ticket created\");\n    //updateTicketList(currentPage);\n  });\n  socket.on(\"tokens patched\", function() {\n    toastr.success(\"Ticket status updated\");\n    //updateTicketList(currentPage);\n  });\n})\n.catch(error => {\n  console.log(\"auth error or not authenticated, redirecting...\", error);\n  window.location.href = '/login.html';\n});\n\nfunction logout() {\n  // log out of feathers and redirect to login page\n  client.logout();\n  window.location.href = '/login.html';\n}\n\nfunction updateTicketList(page, tokenQuery) {\n  console.log(\"updating ticket list for page \"+page)\n  if (pagesLoaded.includes(page)) {\n    console.log(\"page already loaded\");\n    currentPage -= 1;\n    return;\n  }\n  pagesLoaded.push(page);\n\n  var q = {};\n\n  if (tokenQuery.length === 0) {\n    q = {\n      query: {\n        $limit: itemsPerPage,\n        $skip: page * itemsPerPage,\n        $sort: {\n          createdAt: -1\n        }\n      }\n    };\n  } else {\n    q = {\n      query: {\n        $limit: itemsPerPage,\n        $skip: page * itemsPerPage,\n        $sort: {\n          createdAt: -1\n        },\n        $or: tokenQuery\n      }\n    }\n  }\n\n  client.service('/tokens').find(q).then(tickets => {\n    //$(\"#ticket-list\").find(\"tr:gt(0)\").remove();\n\n    if (tickets.data.length < itemsPerPage) {\n      currentPage -= 1;\n    }\n\n    var row = 1 + page * itemsPerPage;\n    var stable = $(\"#ticket-list\")[0];\n    tickets.data.map(ticket => {\n      var r = stable.insertRow(row);\n      ticket.curStatus = ticket.isClosed ? \"Closed\" :\n        (!ticket.fulfilled ? \"Queued\" :\n        (!ticket.cancelledByStudent ? \"In progress\" : \"Cancelled\"))\n      r.insertCell(0).innerHTML = row;\n      r.insertCell(1).innerHTML = ticket.curStatus;\n      r.insertCell(2).innerHTML = ticket.user.name || ticket.user.directoryID;\n      r.insertCell(3).innerHTML = (new Date(ticket.createdAt)).toLocaleString();\n      r.insertCell(4).innerHTML = !!ticket.fulfilledByName ? ticket.fulfilledByName : \"\";\n      r.insertCell(5).innerHTML = ticket.desc || \"No description\";\n      $(r).css(\"cursor\", \"pointer\");\n      $(r).attr(\"data-toggle\", \"modal\");\n      $(r).attr(\"data-target\", \"#ticket-modal\")\n      const pos = row;\n      $(r).click(function() {\n        $(\"#ticket-modal-label\").text(\"#\" + pos +\": \"\n          + (ticket.user.name || ticket.user.directoryID)\n          + \" on \" + (new Date(ticket.createdAt)).toLocaleString());\n        setModal(ticket);\n      });\n      row++;\n    });\n    allTickets = allTickets.concat(tickets);\n    $(\"#all-tickets-label\").html(\"All tickets (\"+tickets.total+\")\");\n  });\n}\n\nfunction setModal(ticket) {\n  var finalHTML = '';\n  finalHTML += '<h4>Ticket status: <span style=\"color:gray\">' + ticket.curStatus + '</span></h4>';\n  finalHTML += '<p> Description: </p> <div class=\"well\">' + (ticket.desc || \"No description\") +\"</div>\";\n  if (ticket.fulfilled && !ticket.cancelledByStudent) {\n    // TODO: link to TA stats for this TA somehow\n    finalHTML += '<hr><h5 style=\"display:inline-block;\">Responding TA:</h5> ' + ticket.fulfilledByName + \"<br>\"\n    if (ticket.isClosed) {\n      finalHTML += '<h5 style=\"display:inline-block;\">Ticket closed on:</h5> ' + (new Date(ticket.closedAt)).toLocaleString() + \"<br>\";\n      if (!!ticket.comment) {\n        finalHTML += '<h5 style=\"display:inline-block;\">Student was knowledgeable:</h5> ' + ticket.comment.knowledgeable + '<br>' ;\n        finalHTML += '<h5 style=\"display:inline-block;\">Student could have solved problem with less help:</h5> ' + ticket.comment.toldTooMuch + '<br>';\n        finalHTML += '<br><p>TA Notes:</p><div class=\"well\">' + (!!ticket.comment.text ? ticket.comment.text : \"No notes\") + '</div>';\n        // if we turn on extra tokens, put text for that here\n      } else {\n        finalHTML += '<br><h5>Comments not available</h5>';\n      }\n    }\n  } else if (ticket.cancelledByStudent) {\n    finalHTML += \"<hr><h4> This ticket was cancelled by the student</h4>\";\n  }\n\n  $(\"#ticket-modal-body\").html(finalHTML);\n}\n\nconst tokens = client.service('/tokens');\nlet tokenQuery = [];\nlet timeOutID = null;\n\nfunction searchTokens() {\n  if (timeOutID !== null) {\n    clearTimeout(timeOutID);\n  }\n\n  timeOutID = setTimeout(() => {\n    var input, filter, table, tr, td, i;\n    input = document.getElementById(\"searchBox\");\n    filter = input.value.toUpperCase();\n    table = document.getElementById(\"ticket-list\");\n    tr = table.getElementsByTagName(\"tr\");\n\n    if (filter === \"\") {\n      tokenQuery = [];\n    } else {\n      tokenQuery = [\n          { desc: { $search: filter } },\n          { fulfilledByName: { $search: filter } }\n      ];\n    }\n\n    currentPage = 0;\n    pagesLoaded = [];\n    $(\"#ticket-list\").hide();\n    $(\"#ticket-list\").find(\"tr:gt(0)\").remove();\n\n    updateTicketList(currentPage, tokenQuery);\n    $(\"#ticket-list\").show();\n  }, 100);\n}\n\n$(document).ready(function() {\n  $(window).scroll(function() {\n   if($(window).scrollTop() + $(window).height() == $(document).height()) {\n     currentPage += 1;\n     // we load too fast otherwise\n     setTimeout(function() {\n       updateTicketList(currentPage, tokenQuery);\n     }, 200);\n   }\n  });\n});\n"],"file":"tickets.js"}