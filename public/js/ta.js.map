{"version":3,"names":[],"mappings":"","sources":["ta.js"],"sourcesContent":["// Feathers/API setup\nconst socket = io({secure: true});\nconst client = feathers()\n.configure(feathers.hooks())\n.configure(feathers.socketio(socket))\n.configure(feathers.authentication({\n  cookie: 'feathers-jwt',\n}));\n\n// toastr config\ntoastr.options.closeDuration = 12000;\ntoastr.options.positionClass = \"toast-bottom-right\";\n\n// from remysharp.com\nfunction throttle(fn, threshhold, scope) {\n  threshhold || (threshhold = 1000);\n  var last,\n      deferTimer;\n  return function () {\n    var context = scope || this;\n\n    var now = +new Date,\n        args = arguments;\n    if (last && now < last + threshhold) {\n      // hold on to it\n      clearTimeout(deferTimer);\n      deferTimer = setTimeout(function () {\n        last = now;\n        fn.apply(context, args);\n      }, threshhold);\n    } else {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n}\n\nconst users = client.service('/users');\nclient.authenticate()\n.then(response => {\n  console.info(\"authenticated successfully\");\n  client.set('jwt', response.accessToken)\n  return client.passport.verifyJWT(response.accessToken);\n})\n.then(payload => {\n  console.info(\"verified JWT\");\n\n  return users.get(payload.userId)\n})\n.then(user => {\n  console.log(\"user\",user);\n  // don't worry, we don't allow any instructor/admin-level\n  // queries to be performed on the back end via REST.\n  if (user.role !== \"Instructor\" && user.role !== \"TA\") {\n    window.location.href = '/';\n  } else if (user.role === \"Instructor\") {\n    // add link back to instructor home\n    $('<li><a href=\"/instructor.html\">Instructor Home</a></li>').insertBefore('ul.nav>li:first');\n  }\n\n  client.set('user', user);\n  if (user.onDuty) {\n    clockIn();\n  } else {\n    clockOut();\n  }\n\n  // TODO: these should only run once\n  socket.on(\"passcode updated\", function() {\n    setPasscode();\n    toastr.success(\"Passcode updated.\", {timeout: 300000});\n  });\n  socket.on(\"tokens created\", function(token) {\n    updateStudentQueue();\n    toastr.success(\"New ticket created\");\n  });\n  socket.on(\"tokens patched\", throttle(function(token) {\n    updateStudentQueue();\n    toastr.success(\"Ticket status updated\");\n  }));\n  socket.on(\"availabletas updated\", setAvailableTAsHTML);\n  updateStudentQueue();\n})\n.catch(error => {\n  console.log(\"auth error or not authenticated, redirecting...\", error);\n  window.location.href = '/login.html';\n});\n\nfunction logout() {\n  // go off duty, then logout and redirect to login page\n  users.patch(client.get('user')._id, {onDuty: false})\n  .then(newMe => {\n    client.logout();\n    window.location.href = '/login.html';\n  }).catch(function(err) {\n    client.logout();\n    window.location.href = '/login.html';\n  });\n}\n\nfunction setPasscode() {\n  client.service('passcode').get({}).then(result => {\n    $(\"#passcode\").html(result.passcode);\n  });\n}\n\nfunction setAvailableTAsHTML(availabletas) {\n  $('#num-tas').html(\"\" + (availabletas.total));\n  $(\"#ta-table\").find(\"tr\").remove();\n  var row = 0;\n  var ttable = $(\"#ta-table\")[0];\n  availabletas.data.map(ta => {\n    var r = ttable.insertRow(row);\n    r.insertCell(0).innerHTML = ta.name || ta.directoryID;\n    row++;\n  });\n}\n\nfunction setAvailableTAs() {\n  client.service('/availabletas').find().then(availabletas => {\n    setAvailableTAsHTML(availabletas);\n  });\n}\n\nfunction updateStudentQueue() {\n  client.service('/tokens').find({query:\n    {\n      $limit: 100,\n      fulfilled: false,\n    }\n  }).then(tickets => {\n    $(\"#student-table\").find(\"tr:gt(0)\").remove();\n    var row = 1;\n    var stable = $(\"#student-table\")[0];\n    tickets.data.map(ticket => {\n      var r = stable.insertRow(row);\n      r.insertCell(0).innerHTML = row;\n      r.insertCell(1).innerHTML = ticket.user.name || ticket.user.directoryID;\n      r.insertCell(2).innerHTML = ticket.desc || \"No description\";\n      var dateCell = r.insertCell(3);\n      dateCell.innerHTML = (formatTime(new Date(ticket.createdAt)));\n      dateCell.classList.add(\"time\");\n      dateCell.dataset.time = new Date(ticket.createdAt);\n      row++;\n    });\n    $(\"#students-in-queue\").html(tickets.total);\n    if (tickets.total == 0) {\n      $(\"#student-dequeue-btn\").hide();\n    } else {\n      $(\"#student-dequeue-btn\").show();\n    }\n  });\n}\n\nfunction clockIn() {\n  $(\"#student-queue-area\").show();\n  $(\"#clock-in-area\").hide();\n  $(\"#clock-out-area\").show();\n  setAvailableTAs();\n  updateStudentQueue();\n  setPasscode();\n  getCurrentStudent();\n}\n\nfunction clockOut() {\n  $(\"#student-queue-area\").hide();\n  $(\"#clock-in-area\").show();\n  $(\"#clock-out-area\").hide();\n  setAvailableTAs();\n}\n\nfunction dequeueStudent() {\n  client.service('dequeue-student').create({})\n  .then(result => {\n    //console.log(result);\n    getCurrentStudent();\n    updateStudentQueue();\n  })\n  .catch(function (err) {\n    console.error(err);\n  })\n}\nvar currentTicket;\n\nfunction getCurrentStudent() {\n  client.service('tokens').find(\n    {\n      query: {\n        $limit: 1,\n        fulfilled: true,\n        isBeingHelped: true,\n        fulfilledBy: client.get('user')._id,\n        $sort: {\n          createdAt: 1\n        }\n      }\n    }).then((ticket) => {\n      if (ticket.total >= 1) {\n        currentTicket = ticket.data[0];\n        showCurrentTicket(currentTicket);\n        $(\"#student-dequeue-btn\").hide();\n      } else {\n        $(\"#current-student-area\").hide();\n      }\n    }).catch(function (err) {\n      console.error(err);\n    });\n}\n\n// https://stackoverflow.com/questions/1199352/smart-way-to-shorten-long-strings-with-javascript\nString.prototype.trunc = function(n, useWordBoundary) {\n  if (this.length <= n) {\n    return this;\n  }\n  var subString = this.substr(0, n-1);\n  return (useWordBoundary ? subString.substr(0, subString.lastIndexOf(' '))\n  : subString) + \"...\";\n}\n\nfunction generateComment(comment) {\n  var result = \"\"\n  if (!comment) {\n    return \"\";\n  }\n  if (!!comment.text) {\n    result += comment.text + \" \";\n  }\n\n  if (comment.knowledgeable !== \"Not sure\" && comment.toldTooMuch !== \"Not sure\") {\n    result += \"[From questionnaire]: \"\n  }\n  if (comment.knowledgeable == \"Yes\") {\n    result += \"Student seemed knowledgeable\";\n    if (comment.toldTooMuch !== \"Not sure\") {\n      result += \" -- \"\n    }\n  } else if (comment.knowledgeable == \"No\") {\n    result += \"Student did not seem knowledgeable\";\n    if (comment.toldTooMuch !== \"Not sure\") {\n      result += \" -- \"\n    }\n  }\n\n  if (comment.toldTooMuch == \"Yes\") {\n    result += \"Student may have been able to solve problem with less TA help\";\n  } else if (comment.toldTooMuch == \"No\") {\n    result += \"Student probably needed TA help to solve problem\";\n  }\n\n  return result;\n\n}\n\nfunction showCurrentTicket(ticket) {\n  client.service('tokens').find(\n    {\n      query: {\n        $limit: 10,\n        fulfilled: true,\n        isBeingHelped: false,\n        cancelledByStudent: false,\n        user: ticket.user._id,\n        $sort: {\n          createdAt: -1\n        }\n      }\n    }).then(prevTickets => {\n      $(\"#prev-tickets-table\").find(\"tr:gt(0)\").remove();\n      var row = 1;\n      var stable = $(\"#prev-tickets-table\")[0];\n\n      if ((!! prevTickets.data) && prevTickets.data.length > 0) {\n        prevTickets.data.map(ticket => {\n          var r = stable.insertRow(row);\n          var comment = generateComment(ticket.comment);\n          var desc = ticket.desc || \"No description\";\n\n          r.insertCell(0).innerHTML = '<small>' + row + '</small>';\n\n          var dateCell = r.insertCell(1);\n          dateCell.innerHTML = '<small>' + (formatTime(new Date(ticket.closedAt))) + '</small>';\n          dateCell.classList.add(\"timeSmall\");\n          dateCell.dataset.time = new Date(ticket.closedAt);\n\n          r.insertCell(2).innerHTML = '<small>' + ticket.fulfilledByName || \"N/A\" + \"</small>\";\n          if (desc.length > 60) {\n            r.insertCell(3).innerHTML = '<small title=\"Full Description for #'+row\n            +'\" data-placement=\"bottom\" data-toggle=\"popover\" data-content=\"'+desc+'\">'\n            + (desc).trunc(60, true) + '</small>';\n          } else {\n            r.insertCell(3).innerHTML = '<small>' + desc + '</small>';\n          }\n          if (comment.length > 60) {\n            r.insertCell(4).innerHTML = '<small title=\"All TA Comments for #'+row\n            +'\" data-placement=\"bottom\" data-toggle=\"popover\" data-content=\"'+comment+'\">'\n            + (comment).trunc(60, true) + '</small>';\n          } else {\n            r.insertCell(4).innerHTML = '<small>' + comment + '<small>';\n          }\n\n          row++;\n        });\n      }\n      $(\"[data-toggle=popover]\").popover({ trigger: \"hover\" });\n      $(\"#current-student-name\").html(\"Assisting: \" + ticket.user.name);\n      $(\"#current-student-name-2\").html(\"Recent tickets for \" + ticket.user.name);\n      $(\"#current-student-issue-text\").html(ticket.desc || \"No description provided\");\n      $(\"#current-student-ticket-createtime\").html(\"Ticket created \" + (new Date(ticket.createdAt)).toLocaleString());\n      $(\"#current-student-area\").show();\n      console.log(prevTickets);\n    }).catch(function (err) {\n      console.error(err);\n    });\n}\n\nfunction closeTicket() {\n  if ((!!currentTicket) && window.confirm(\"Are you sure you want to permanently close this ticket?\")) {\n    $(\"#current-student-area\").hide();\n    client.service('comment').create({\n      text:  $('#student-notes-box').val(),\n      knowledgeable: $('input[name=radio1]:checked').val(),\n      toldTooMuch: $('input[name=radio2]:checked').val(),\n      student: currentTicket.user._id,\n      ticket: currentTicket._id\n    }).then(comment => {\n      client.service('tokens').patch(currentTicket._id, {\n        isBeingHelped: false,\n        isClosed: true,\n        closedAt: Date.now(),\n        comment: comment._id,\n        // TODO: shouldIgnoreInTokenCount: false/true\n      }).then(updatedTicket => {\n        $('#student-notes-box').val(\"\")\n        toastr.success(\"Ticket closed and comment successfully saved\");\n        currentTicket = null;\n        updateStudentQueue();\n      });\n    }).catch(function(err) {\n      toastr.error(\"Error closing ticket and submitting comments\");\n      console.error(err);\n      currentTicket = null;\n    });\n  }\n}\n\nfunction markNoshow() {\n  if ((!!currentTicket) && window.confirm(\"Warning: Marking this student as a no show. Are you sure?\")) {\n    $(\"#current-student-area\").hide();\n      client.service('tokens').patch(currentTicket._id, {\n        isBeingHelped: false,\n        isClosed: true,\n        noShow: true,\n        closedAt: Date.now(),\n        // TODO: shouldIgnoreInTokenCount: false/true\n      }).then(updatedTicket => {\n        $('#student-notes-box').val(\"\")\n        toastr.success(\"Student marked as a no-show and ticket closed\");\n        currentTicket = null;\n        updateStudentQueue();\n      });\n  }\n}\n\nfunction endOH() {\n  if ((!currentTicket) && window.confirm(\"Warning: By ending office hours you will permenantly cancel all tickets in the queue. Are you sure?\")) {\n    client.service('/tokens').find({query:\n      {\n        $limit: 100,\n        fulfilled: false,\n      }\n    }).then(tickets => {\n      // should we move this into our own service or no?\n      tickets.data.map(ticket => {\n        client.service('tokens').patch(ticket._id,\n          {\n            cancelledByTA: true,\n            fulfilled: true,\n            fulfilledBy: client.get('user')._id,\n            fulfilledByName: client.get('user').name,\n            isClosed: true,\n            dequeuedAt: new Date(),\n            closedAt: new Date()\n        });\n      });\n    });\n  }\n}\n\n$(function() {\n  $(\"#close-ticket-form\").submit(function(e) {\n    e.preventDefault();\n    closeTicket();\n  });\n  $(\"#noshow-form\").submit(function(e) {\n    e.preventDefault();\n    markNoshow();\n  });\n  $('#student-dequeue-form').submit(function(e) {\n    e.preventDefault();\n    dequeueStudent();\n  });\n  $('#clock-in-form').submit(function(e) {\n    e.preventDefault();\n    users.patch(client.get('user')._id, {onDuty: true}).then(newMe => {\n      // probably better to pass in the results but this works\n      toastr.success(\"You are now in office hours\");\n      clockIn();\n    });\n  });\n  $(\"#clock-out-form\").submit(function(e) {\n    e.preventDefault();\n    users.patch(client.get('user')._id, {onDuty: false})\n    .then(newMe => {\n      toastr.success(\"You are logged out of office hours\");\n      clockOut();\n    });\n  });\n});\n"],"file":"ta.js"}