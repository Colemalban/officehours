{"version":3,"names":[],"mappings":"","sources":["instructor.js"],"sourcesContent":["// Feathers/API setup\nconst socket = io({secure: true});\nconst client = feathers()\n.configure(feathers.hooks())\n.configure(feathers.socketio(socket))\n.configure(feathers.authentication({\n  cookie: 'feathers-jwt',\n}));\nconst users = client.service('/users');\nclient.authenticate()\n.then(response => {\n  console.info(\"authenticated successfully\");\n  client.set('jwt', response.accessToken)\n  return client.passport.verifyJWT(response.accessToken);\n})\n.then(payload => {\n  console.info(\"verified JWT\");\n  return users.get(payload.userId)\n})\n.then(user => {\n  console.log(\"user\",user);\n  // don't worry, we don't allow any instructor/admin-level\n  // queries to be performed on the back end via REST.\n  if (user.role !== \"Instructor\") {\n    window.location.href = '/';\n  }\n  client.set('user', user);\n  refreshUsers();\n  updateStats();\n\n  socket.on(\"tokens created\", function(token) {\n    updateStudentQueue();\n    toastr.success(\"New ticket created\");\n  });\n  socket.on(\"tokens patched\", function(token) {\n    updateStudentQueue();\n    toastr.success(\"Ticket status updated\");\n  });\n  updateStudentQueue();\n})\n.catch(error => {\n  console.log(\"auth error or not authenticated, redirecting...\", error);\n  window.location.href = '/login.html';\n});\n\n// toastr config\ntoastr.options.closeDuration = 8000;\ntoastr.options.positionClass = \"toast-bottom-right\";\n\nfunction logout() {\n  // log out of feathers and redirect to login page\n  client.logout();\n  window.location.href = '/login.html';\n}\n\n/**********/\nfunction updateStudentQueue() {\n  client.service('/tokens').find({query: {fulfilled: false}}).then(tickets => {\n    $(\"#student-table\").find(\"tr:gt(0)\").remove();\n    var row = 1;\n    var stable = $(\"#student-table\")[0];\n    tickets.data.map(ticket => {\n      var r = stable.insertRow(row);\n      r.insertCell(0).innerHTML = row;\n      r.insertCell(1).innerHTML = ticket.user.name || ticket.user.directoryID;\n      r.insertCell(2).innerHTML = ticket.desc || \"No description\";\n      var dateCell = r.insertCell(3);\n      dateCell.innerHTML = (formatTime(new Date(ticket.createdAt)));\n      dateCell.classList.add(\"time\");\n      dateCell.dataset.time = new Date(ticket.createdAt);\n      row++;\n    });\n    $(\"#students-in-queue\").html(tickets.total);\n    $(\"#students-in-queue-sm\").html(tickets.total);\n  });\n}\n\nfunction renderUsers(users) {\n  $(\"#userTable\").find(\"tr:gt(0)\").remove();\n  var row = 1;\n  var utable = $(\"#userTable\")[0];\n  users.data.map(user => {\n    var r = utable.insertRow(row);\n    r.insertCell(0).innerHTML = row;\n    r.insertCell(1).innerHTML = user.directoryID;\n    r.insertCell(2).innerHTML = user.name || user.directoryID;\n    r.insertCell(3).innerHTML = user.role;\n    if (client.get('user')._id !== user._id) {\n      r.insertCell(4).innerHTML = '<a href=\"javascript:deleteUser(\\''+user._id+'\\')\">Delete ✖</a>';\n    } else {\n      r.insertCell(4).innerHTML = '<a style=\"color:gray;\">Delete ✖</a>';\n    }\n    //r.insertCell(4).innerHTML = '<a href=\"/editUser?uid='+user._id+'\">Edit ✎</a> | <a href=\"javascript:deleteUser(\\''+user._id+'\\')\">Delete ✖</a>'\n\n    row++;\n  })\n}\n\nfunction refreshUsers() {\n  users.find({query: {$limit: 5000, $sort: {createdAt: -1}}}).then(results => {\n    renderUsers(results);\n  }).catch(function(err) {\n    console.error(err);\n  });\n}\n\nfunction deleteUser(user) {\n  if (window.confirm(\"Are you sure you want to permanently delete this user?\")) {\n    users.remove(user).then( res => {\n      refreshUsers();\n    }).catch(function(err) {\n      console.error(err);\n    })\n  }\n}\n\nfunction deleteAllStudents() {\n  if (window.confirm(\"Are you sure you want to permanently delete ALL students?\")) {\n    deleteAllWithRole(\"Student\");\n  }\n}\n\nfunction deleteAllTAs() {\n  if (window.confirm(\"Are you sure you want to permanently delete ALL TA's?\")) {\n    deleteAllWithRole(\"TA\");\n  }\n}\n\nfunction deleteAllWithRole(role) {\n  users.remove(null, {\n    query: {\n      role: role\n    }\n  }).then( res => {\n    refreshUsers();\n  }).catch(function(err) {\n    console.error(err);\n  });\n}\n\n// stats\nfunction updateStats() {\n  // we're not ready yet\n  if (!cfg.statsAvailable) {\n    return;\n  }\n\n  const lastMidnight = new Date();\n  lastMidnight.setHours(0,0,0,0);\n  const lastWeek = new Date();\n  lastWeek.setDate(lastWeek.getDate() - 7);\n  $(\"#student-stats-well\").hide();\n\n  client.service('/tokens').find({\n    query: {\n      createdAt: {\n        $gt: lastMidnight.getTime(),\n      },\n      $limit: 0,\n    }\n  }).then(res => {\n    $(\"#stats-tix-today\").html(res.total);\n    return client.service('/tokens').find({\n      query: {\n        createdAt: {\n          $gt: lastWeek.getTime(),\n        },\n        $limit: 0,\n      }\n    }).then(res => {\n      $(\"#stats-tix-week\").html(res.total);\n      return client.service('/tokens').find({\n        query: {\n          $limit: 0,\n        }\n      });\n    }).then(res => {\n      $(\"#stats-tix-total\").html(res.total);\n      $(\"#student-stats-well\").show();\n    }).catch(function(err) {\n      console.err(err);\n    })\n  });\n\n  // TODO: Graph generation here\n  var svg = d3.select(\"svg\"),\n    margin = {top: 20, right: 20, bottom: 30, left: 50},\n    width = +svg.attr(\"width\") - margin.left - margin.right,\n    height = +svg.attr(\"height\") - margin.top - margin.bottom,\n    g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\n}\n\n$(function() {\n  // Delete all students button\n  $('#delete-all-students').click(deleteAllStudents);\n\n  // Delete all TAs button\n  $('#delete-all-tas').click(deleteAllTAs);\n\n  // Add user button\n  $('#add-user').submit(function(e) {\n    e.preventDefault();\n    var newUser = {\n      name: $('#add-user-name').val(),\n      directoryID: $(\"#add-user-directoryid\").val(),\n      role: $(\"#add-user-role\").find(\":selected\").text()\n    };\n    console.log(newUser);\n    users.create(newUser).then( res => {\n      $('#add-user-name').val(\"\");\n      $(\"#add-user-directoryid\").val(\"\");\n      refreshUsers();\n    }).catch(function(err) {\n      console.error(err);\n    })\n  });\n\n  // Upload form\n  var uploadForm = document.getElementById('js-upload-form');\n\n  var startUpload = function(files) {\n    var form = new FormData();\n    form.append('userfile', files[0]);\n    $.ajax({\n      url: '/csvUpload',\n      type: 'POST',\n\n      data: form,\n      cache: false,\n      contentType: false,\n      processData: false,\n      headers: {\n        \"Authorization\": client.get('jwt'),\n        //\"Content-Type\": \"applicaiton/json\"\n      },\n      success: function(data, textStatus, jqXHR) {\n        toastr.success(\"Successfully created new users\");\n        refreshUsers();\n      },\n      error: function(data, textStatus, jqXHR) {\n        console.log(data);\n        let curErr = data.responseJSON.error.cause || \"Malformed CSV\"\n        if (Object.keys(curErr).length === 0 && curErr.constructor === Object) {\n          curErr = \"Malformed CSV\";\n        }\n        toastr.error(\"CSV parse error: \\\"\"+curErr+\"\\\". Make sure the uploaded is formatted correctly and is < 5 MB\")\n        console.log(data, textStatus, jqXHR);\n      }\n    });\n  };\n\n  uploadForm.addEventListener('submit', function(e) {\n    var uploadFiles = document.getElementById('js-upload-files').files;\n    e.preventDefault()\n\n    startUpload(uploadFiles)\n  });\n\n  // Scroll navbar\n  var navItems = [];\n  navItems[0] = $(\"#live-queue\").position().top;\n  navItems[1] = $(\"#student-stats\").position().top;\n  navItems[2] = $(\"#ta-stats\").position().top;\n  navItems[3] = $(\"#manage-user\").position().top;\n  navItems[4] = $(\"#roster\").position().top;\n\n  var navListSm = [];\n  navListSm[0] = $(\"#live-queue-nav-sm\");\n  navListSm[1] = $(\"#student-stats-nav-sm\");\n  navListSm[2] = $(\"#ta-stats-nav-sm\");\n  navListSm[3] = $(\"#manage-user-nav-sm\");\n  navListSm[4] = $(\"#roster-nav-sm\");\n\n  var navListLg = [];\n  navListLg[0] = $(\"#live-queue-nav-lg\");\n  navListLg[1] = $(\"#student-stats-nav-lg\");\n  navListLg[2] = $(\"#ta-stats-nav-lg\");\n  navListLg[3] = $(\"#manage-user-nav-lg\");\n  navListLg[4] = $(\"#roster-nav-lg\");\n\n  var selected = 0;\n\n  $(document).ready(function() {\n    $(window).scroll(function() {\n      const scrollLoc = $(this).scrollTop();\n      var newSelected = 0;\n      if (scrollLoc >= 0 && scrollLoc < navItems[1]) {\n        newSelected = 0;\n      } else if (scrollLoc >= navItems[1] && scrollLoc < navItems[2]) {\n        newSelected = 1;\n      } else if (scrollLoc >= navItems[2] && scrollLoc < navItems[3]) {\n        newSelected = 2;\n      } else if (scrollLoc >= navItems[3] && scrollLoc < navItems[4]) {\n        newSelected = 3;\n      } else if (scrollLoc >= navItems[4]) {\n        newSelected = 4;\n      }\n\n      if (newSelected != selected) {\n        navListLg[selected].removeClass(\"active\");\n        navListSm[selected].removeClass(\"active\");\n        selected = newSelected;\n        navListLg[selected].addClass(\"active\");\n        navListSm[selected].addClass(\"active\");\n      }\n    });\n  });\n});\n\nfunction search() {\n  var input, filter, table, tr, td, i;\n  input = document.getElementById(\"searchBox\");\n  filter = input.value.toUpperCase();\n  table = document.getElementById(\"userTable\");\n  tr = table.getElementsByTagName(\"tr\");\n\n  for (i = 0; i < tr.length; i++) {\n    td = tr[i].getElementsByTagName(\"td\")[2];\n    if (td) {\n      if (td.innerHTML.toUpperCase().indexOf(filter) > -1) {\n        tr[i].style.display = \"\";\n      } else {\n        tr[i].style.display = \"none\";\n      }\n    }\n  }\n\n  $('html, body').animate({\n    scrollTop: ($('#searchBox').offset().top)\n  },100);\n}\n\nfunction sortTable(n) {\n  var sortOrder = parseInt(document.getElementById(\"userTable\").dataset.sortorder);\n  document.getElementById(\"userTable\").dataset.sortorder = -sortOrder + \"\";\n\n  var field = \"createdAt\";\n\n  if (n === 1) {\n    field = \"directoryID\";\n  } else if (n === 2) {\n    field = \"name\";\n  } else if (n === 3) {\n    field = \"role\";\n  }\n\n  var searchQuery = {query: {$limit: 5000, $sort: {}}};\n  searchQuery.query.$sort[field] = sortOrder;\n\n  users.find(searchQuery).then(results => {\n    renderUsers(results);\n  }).catch(function(err) {\n    console.error(err);\n  });\n}\n"],"file":"instructor.js"}