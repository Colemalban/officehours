{"version":3,"names":[],"mappings":"","sources":["student.js"],"sourcesContent":["// Feathers/API setup\nconst socket = io({secure: true});\nconst client = feathers()\n.configure(feathers.hooks())\n.configure(feathers.socketio(socket))\n.configure(feathers.authentication({\n  cookie: 'feathers-jwt',\n}));\nconst users = client.service('/users');\nclient.authenticate()\n.then(response => {\n  console.info(\"authenticated successfully\");\n  client.set('jwt', response.accessToken)\n  return client.passport.verifyJWT(response.accessToken);\n})\n.then(payload => {\n  console.info(\"verified JWT\");\n  // don't worry, we don't allow any instructor/admin-level\n  // queries to be performed on the back end via REST.\n  return users.get(payload.userId)\n})\n.then(user => {\n  if (user.role !== \"Student\") {\n    window.location.href = '/';\n    return;\n  }\n  console.log(\"user\",user);\n  client.set('user', user);\n  setNumTokens();\n  setAvailableTAs();\n\n})\n.catch(error => {\n  console.log(\"auth error or not authenticated, redirecting...\", error);\n  window.location.href = '/login.html';\n});\n\n// toastr config\ntoastr.options.closeDuration = 10000;\ntoastr.options.positionClass = \"toast-bottom-right\";\n\nfunction logout() {\n  // log out of feathers and redirect to login page\n  client.logout();\n  window.location.href = '/login.html';\n}\n\nvar lastTotal = 0;\nvar numTokens = -1;\nvar lastTicketCancelled = false;\n\nfunction setNumTokens() {\n  client.service('/numtokens').get().then(res => {\n    numTokens = res.tokensRemaining;\n\n    $('#num-tokens').html(\"You have <strong>\" + numTokens + \"</strong> tokens remaining.\");\n    return client.service('/tokens').find(\n      {\n        query: {\n          fulfilled: false\n        }\n      }\n    )\n  }).then(unfulfilledTokens => {\n      client.service('/queue-position').get().then(positionInfo => {\n        if (unfulfilledTokens.total > 0) {\n          lastTotal = unfulfilledTokens.total;\n          hideRequestOH(positionInfo.peopleAheadOfMe+1);\n        } else {\n          if (unfulfilledTokens.total == 0 && lastTotal > 0 && !lastTicketCancelled) {\n            toastr.success(\"You have been dequeued by a TA!\", {timeout: 15000});\n          }\n          lastTotal = unfulfilledTokens.total;\n          lastTicketCancelled = false;\n          showRequestOH();\n        }\n        $(\"#students-in-queue\").html(positionInfo.sizeOfQueue);\n        getCurrentTicket();\n      })\n      .catch(function(err) {\n        console.error(err);\n      })\n  })\n}\n\nfunction submitToken() {\n  client.service('/tokens').create({\n    desc: $(\"#ticket-desc\").val(),\n    passcode: $(\"#ticket-code\").val()\n  })\n  .then(ticket => {\n    setNumTokens();\n    toastr.success(\"Your help request has been submitted!\");\n    desc: $(\"#ticket-desc\").val(\"\");\n  })\n  .catch(function (err) {\n    var errMsg = \"Your help request could not be submitted: \";\n    if (numTokens <= 0) {\n      errMsg += \"You are out of tokens.\"\n    } else {\n      errMsg += (!!err.message) ? err.message + \".\" : \"\" ;\n    }\n    toastr.error(errMsg);\n  })\n}\n\nfunction setAvailableTAs() {\n  client.service('/availabletas').find().then(setAvailableTAsHTML);\n}\n\nfunction cancelRequest() {\n  client.service('/tokens').find({\n    query: {\n      fulfilled: false\n    }\n  }).then((tickets) => {\n      if (tickets.total == 0) {\n        toastr.warning(\"There are no open tickets that can be canceled\");\n      } else {\n        // if the student has multiple tickets open for some reason, kill them all\n        tickets.data.map(ticket => {\n          client.service('/tokens').patch(ticket._id, {\n            fulfilled: true,\n            cancelledByStudent: true\n          }).then(ticket => {\n            lastTicketCancelled = true\n            toastr.warning(\"Your help ticket has canceled\")\n            setNumTokens()\n          }).catch( function (err) {\n            toastr.error((!!err.message) ? err.message : \"Cannot cancel ticket\")\n          })\n        })\n      }\n  })\n}\n\nvar currentTicket = null;\n\nfunction getCurrentTicket() {\n  client.service('/tokens').find({\n    query: {\n      $limit: 1,\n      fulfilled: true,\n      isBeingHelped: true,\n      $sort: {\n        createdAt: 1\n      }\n    }\n  }).then((ticket) => {\n    if (ticket.total >= 1) {\n      currentTicket = ticket.data[0];\n      showCurrentTicket(currentTicket);\n    } else {\n      currentTicket = null;\n      $(\"#ticket-responder-name\").html(\"\");\n      $(\"#ticket-description\").html(\"\");\n      $(\"#current-ticket-area\").hide();\n      /*$(\"#ticket-submit-area\").show();\n      $(\"#ticket-no-submit\").hide();*/\n    }\n  }).catch(function (err) {\n    console.error(err);\n  });\n}\n\nfunction showCurrentTicket(ticket) {\n  $(\"#ticket-responder-name\").html(\"TA \" + ticket.fulfilledByName + \" is assisting you\");\n  $(\"#ticket-description\").html(ticket.desc || \"No description provided\");\n  $(\"#current-ticket-area\").show();\n  $(\"#ticket-submit-area\").hide();\n  $(\"#ticket-no-submit\").hide();\n\n}\n\n// magically reactive\nsocket.on(\"availabletas updated\", setAvailableTAsHTML);\nsocket.on(\"queue update\", setNumTokens);\n\nfunction setAvailableTAsHTML(availabletas) {\n  $('#num-tas').html(\"\" + (availabletas.total));\n  $(\"#ta-table\").find(\"tr\").remove();\n  var row = 0;\n  var ttable = $(\"#ta-table\")[0];\n\n  if (availabletas.total == 0) {\n    ttable.insertRow(row).insertCell(0).innerHTML = '<small class=\"text-muted\">No TAs are currently hosting office hours</small>';\n  }\n\n  availabletas.data.map(ta => {\n    var r = ttable.insertRow(row);\n    r.insertCell(0).innerHTML = ta.name || ta.directoryID;\n    row++;\n  });\n}\n\nfunction hideRequestOH(numInQueue) {\n  $(\"#ticket-submit-area\").hide();\n  $(\"#ticket-no-submit\").show();\n  $(\"#ticket-queue-msg\").html(\"You are #\"+numInQueue+\" in the queue\");\n}\n\nfunction showRequestOH() {\n  $(\"#ticket-submit-area\").show();\n  $(\"#ticket-no-submit\").hide();\n  $(\"#ticket-queue-msg\").html(\"You are #\"+0+\" in the queue\");\n}\n\n$(function() {\n  $('#ticket-submit-form').submit(function(e) {\n    e.preventDefault();\n    submitToken();\n  });\n  $('#cancel-req').click(function(e) {\n    cancelRequest();\n  })\n});\n\n/********/\n"],"file":"student.js"}